"""
Running this file generates a csv file that contains the average number of paddle hits
for every episode across 30 training runs (PPO/PPO-MCTS). This can be used to plot
a graph of the average number of paddle hits versus episodes from start to end.
"""

import os
import pandas as pd


def get_average_paddle_hits(folder_path, phrase):
    """
    Generates a csv file that contains the average number of paddle hits for every episode
    across 30 training runs (PPO/PPO-MCTS). It expects the given folder to contain
    csv files that start with avg_paddle_hits_frequent or avg_paddle_hits_sparse. These
    csv files are generated during the training and contain the moving average of
    paddle hits episode by episode.
    """
    # Get all CSV files in the folder that start with "avg_paddle_hits_<phrase>"
    csv_files = [
        f
        for f in os.listdir(folder_path)
        if f.startswith(f"avg_paddle_hits_{phrase}") and f.endswith(".csv")
    ]

    # Check if the number of files is exactly 30
    if len(csv_files) != 30:
        print(
            f"Error: Expected 30 CSV files but found {len(csv_files)} for 'avg_paddle_hits_{phrase}'."
        )
        return

    # Create the full file paths
    csv_paths = [os.path.join(folder_path, file) for file in csv_files]

    # Track the minimum max episode (the lowest episode number at which any file ends)
    min_max_episode = None

    # Read the first CSV to initialize the dataframe sum and also find the min max episode
    df_sum = pd.read_csv(csv_paths[0])
    max_episode = df_sum["Episode"].max()
    min_max_episode = (
        max_episode if min_max_episode is None else min(min_max_episode, max_episode)
    )
    file_with_min_episodes = csv_paths[0]
    # Iterate over the rest of the CSV files
    for csv_path in csv_paths[1:]:
        df = pd.read_csv(csv_path)

        # Update the minimum max episode
        max_episode = df["Episode"].max()
        if max_episode < min_max_episode:
            min_max_episode = max_episode
            file_with_min_episodes = csv_path
        # Add only the paddle hits up to min_max_episode
        df_sum["Average Paddle Hits"] += df["Average Paddle Hits"]

    # Calculate the average by dividing the sum by the number of CSV files
    df_sum["Average Paddle Hits"] /= len(csv_paths)

    # Only include episodes up to the minimum max episode
    df_sum = df_sum[df_sum["Episode"] <= min_max_episode]

    # Output file name
    output_file = f"final_average_paddle_hits_{phrase}.csv"
    output_path = os.path.join(folder_path, output_file)

    # Save the result to a new CSV
    df_sum.to_csv(output_path, index=False)

    print(f"Averaged CSV saved to {output_path} (up to episode {min_max_episode})")
    print(f"The file with the least number of episodes is: {file_with_min_episodes}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) != 3:
        print("Usage: python script.py <folder_path> <phrase>")
        sys.exit(1)

    folder_path = sys.argv[
        1
    ]  # folder in which the paddle hits csv data generated by training runs is there
    phrase = sys.argv[2]  # frequent or sparse

    # Run the function
    get_average_paddle_hits(folder_path, phrase)
