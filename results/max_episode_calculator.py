"""
This file can be be run to generate a csv file that contains the number of episodes needed
to train the agent to play Simple/Complex Pong for each of the 30 training runs.
To do so, data generated from each training run
(in the files avg_paddles_hits_frequent... or avg_paddle_hits_sparse...) is looked at.
"""

import os
import pandas as pd


def save_max_episodes_for_training_run_to_csv(folder_path, phrase):
    """
    Generates a csv file that contains the number of episodes needed
    to train the agent to play Simple/Complex Pong for each of the 30 training runs.
    To do so, data generated from each training run
    (in the files avg_paddles_hits_frequent... or avg_paddle_hits_sparse...) is looked at
    and the highest episode number for that training run is added to the final csv file.
    """
    # Get all CSV files in the folder that start with "avg_paddle_hits_<phrase>"
    csv_files = [
        f
        for f in os.listdir(folder_path)
        if f.startswith(f"avg_paddle_hits_{phrase}") and f.endswith(".csv")
    ]

    # Check if the number of files is exactly 30
    if len(csv_files) != 30:
        print(
            f"Error: Expected 30 CSV files but found {len(csv_files)} for 'avg_paddle_hits_{phrase}'."
        )
        return

    # Create the full file paths
    csv_paths = [os.path.join(folder_path, file) for file in csv_files]

    # List to store the max episode numbers
    max_episodes = []

    # Iterate over all CSV files to find the largest episode in each
    for csv_path in csv_paths:
        df = pd.read_csv(csv_path)
        max_episode = df["Episode"].max()  # Get the largest episode for this file
        max_episodes.append(max_episode)  # Add it to the list

    # Create a DataFrame to save the results
    df_max_episodes = pd.DataFrame({"File": csv_files, "Max Episode": max_episodes})

    # Save the DataFrame to CSV
    output_file = os.path.join(folder_path, f"final_max_episodes_{phrase}.csv")
    df_max_episodes.to_csv(output_file, index=False)

    print(f"CSV file saved as {output_file}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) != 3:
        print("Usage: python script.py <folder_path> <phrase>")
        sys.exit(1)

    folder_path = sys.argv[
        1
    ]  # folder in which the csv data generated by training runs is there
    phrase = sys.argv[2]  # frequent or sparse

    # Run the function
    save_max_episodes_for_training_run_to_csv(folder_path, phrase)
